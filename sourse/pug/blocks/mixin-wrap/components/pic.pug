- let webpImage= true
- let webpFormat= (webpImage== true ? 'webp' : null)
mixin pic(i, bg,  media)
	-
		const smpath2 = "2x"
		const smpath1 = "1x"
		let expArr = i.split(".")
		let exp = (expArr[1] || 'jpg')
	mixin src(i, exp, path ,   source, bg)
		-
			const url= `img/@${path}/${expArr[0]}.${exp}`
			const data = (ifLazy ?  url  : null)

		if source
			source(type=`image/${exp}` srcset=url)&attributes(attributes)
		else
			
				img(class=(bg=="bg" ? "object-fit-js": null ) src=url alt="" loading='lazy' )
	
	// picture
	
	picture()&attributes(attributes) 
		//- noscript(class="loading-lazy")
		if media
			
			each val in [ webpFormat,exp] 
				each val2 in [smpath2,smpath1] 
					+src(i,val,`${val2 + (val ==  "webp" ? "/webp"  : "") }`,"source")(media=(val2 == smpath2 ? "(min-width:"+ media+")" : null))
		else 
			if webpFormat
				//- +src(i,'avif',smpath2+`/avif`,"source")
		+src(i,'webp',smpath2+`/webp`,"source")
			//- // /webp images  
		+src(i, exp,smpath2, "",bg) 
	// /picture
//- mixin pic(i, bg,  media='576px')
//- 	-
//- 		const smpath2 = "2x"
//- 		const smpath1 = "1x"
//- 		let expArr = i.split(".")
//- 		let exp = (expArr[1] || 'jpg')
//- 	mixin src(i, exp, path ,   source, bg)
//- 		-
//- 			const url= `img/@${path}/${expArr[0]}.${exp}`
//- 			const data = (ifLazy ?  url  : null)

//- 		if source
//- 			source(type=`image/${exp}` srcset=url)&attributes(attributes)
//- 		else
			
//- 				img(class=(bg=="bg" ? "object-fit-js": null ) src=url alt="" loading='lazy' )
	
//- 	// picture
	
//- 	picture()&attributes(attributes) 
//- 		//- noscript(class="loading-lazy")
//- 		if media
			
//- 			each val in [ webpFormat,exp] 
//- 				each val2 in [smpath2,smpath1] 
//- 					+src(i,val,`${val2 + (val ==  "webp" ? "/webp"  : "") }`,"source")(media=(val2 == smpath2 ? "(min-width:"+ media+")" : null))
//- 		else 
//- 			if webpFormat
//- 				//- +src(i,'avif',smpath2+`/avif`,"source")
//- 				+src(i,'webp',smpath2+`/webp`,"source")
//- 			//- // /webp images  
//- 		+src(i, exp,smpath2, "",bg) 
//- 	// /picture
